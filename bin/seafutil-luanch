#!/usr/bin/python2.7
import os
import sys
import time
import signal
import errno
from oslocfg import cfg
from seafutil import config
from seafutil.seafile import SeafileCommand
from seafutil.ccnet import CcnetCommand

CONF = cfg.CONF

SEAFILE = '/usr/bin/seaf-server'
CCNET = '/usr/bin/ccnet-server'

CONF.register_cli_opts(config.luanch_opts)
CONF(project='seafutil-luanch')


class SignalHandler(object):
    """Systemd TimeoutStartSec"""

    IGNORE  = frozenset(['SIG_DFL', 'SIG_IGN'])

    def __init__(self):
        self._signals_by_name = dict((name, getattr(signal, name))
                                     for name in dir(signal)
                                     if name.startswith("SIG")
                                     and name not in self.IGNORE)

    def handle_signal(self, handle):
        for signame in ('SIGTERM', 'SIGHUP', 'SIGINT'):
            signo = self._signals_by_name[signame]
            signal.signal(signo, handle)


def check(cfile, pidfile):
    return True


def handle_exitstatus(sts, _WIFSIGNALED=os.WIFSIGNALED,
        _WTERMSIG=os.WTERMSIG, _WIFEXITED=os.WIFEXITED,
        _WEXITSTATUS=os.WEXITSTATUS):
    # This method is called (indirectly) by __del__, so it cannot
    # refer to anything outside of its local scope."""
    if _WIFSIGNALED(sts):
        return -_WTERMSIG(sts)
    elif _WIFEXITED(sts):
        return _WEXITSTATUS(sts)
    else:
        # Should never happen
        raise RuntimeError("Unknown child exit status!")


class Luanch():


    def __init__(self, action, pidfile):
        self.pid = None
        self.action = action
        self.pidfile = pidfile

    def seafile(self):
        """
        char *argv[] = {
            "seaf-server",
            "-F", ctl->central_config_dir,
            "-c", ctl->config_dir,
            "-d", ctl->seafile_dir,
            "-l", logfile,
            "-P", ctl->pidfile[PID_SERVER],
            NULL};
        """

        args = [SEAFILE,
                '-F', CONF.cfgdir,
                '-c', os.path.join(CONF.datadir, CcnetCommand.DATADIR),
                '-d', os.path.join(CONF.datadir, SeafileCommand.DATADIR),
                '-l', os.path.join(CONF.logdir, 'seafile-server.log'),
                '-P', self.pidfile
                ]

        return args

    def ccnet(self):
        """
        char *argv[] = {
            "ccnet-server",
            "-F", ctl->central_config_dir,
            "-c", ctl->config_dir,
            "-f", logfile,
            "-d",
            "-P", ctl->pidfile[PID_CCNET],
            NULL};
        """
        args = [CCNET,
                '-F', CONF.cfgdir,
                '-c', os.path.join(CONF.datadir, CcnetCommand.DATADIR),
                '-d',
                '-l', os.path.join(CONF.logdir, 'ccnet-server.log'),
                '-P', self.pidfile
                ]

        return args

    def start(self, timeout):
        func = getattr(self, self.action)
        args = func()
        pid = os.fork()
        if pid == 0:
            os.execv(args[0], args)
        else:
            self.pid = pid

            def kill(signo, frame):
                if self.pid is not None:
                    os.kill(self.pid, signal.SIGKILL)

            SignalHandler().handle_signal(kill)
            overtime = time.time() + timeout - 0.1
            while 1:
                if time.time() > overtime:
                    os.kill(pid, signal.SIGKILL)
                    os.wait()
                    import logging
                    logging.error('Luanch seafie controller overtime')
                    return False
                try:
                    _pid, sts = os.waitpid(pid, 0)
                except OSError as e:
                    if e.errno != errno.ECHILD:
                        raise
                    return True
                if _pid:
                    code = handle_exitstatus(sts)
                    if code == 0:
                        return True
                    else:
                        import logging
                        logging.error('Seafie controller exit status %d' % code)
                        return False
                time.sleep(0.01)

def main():
    cfile = CONF.config
    pidfile = CONF.pid
    timeout = CONF.timeout

    action = CONF.action

    CONF.reset()
    CONF.register_cli_opts(config.server_opts)
    CONF(project='seafile-%s' % action, default_config_files=[cfile, ])

    if not check(cfile, pidfile):
        sys.exit(1)
    luanch = Luanch(action, pidfile)
    if luanch.start(timeout):
        sys.exit(0)
    else:
        sys.exit(1)

if __name__ == '__main__':
    main()
