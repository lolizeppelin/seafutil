#!/usr/bin/python2.7
# -*- encoding: utf-8 -*-
"""
Seahub 过期清理
清理 Session 表:
cd <install-path>/seafile-server-latest
./seahub.sh python-env seahub/manage.py clearsessions
文件活动 (Activity)
要清理文件活动表，登录到 MySQL/MariaDB，然后使用以下命令:
use seahub_db;
DELETE FROM Event WHERE to_days(now()) - to_days(timestamp) > 90;


Seafile 过期清理
usage: seafserv-gc [-c config_dir] [-d seafile_dir] [repo_id_1 [repo_id_2 ...]]
Additional options:
-r, --rm-deleted: remove garbaged repos
-D, --dry-run: report blocks that can be remove, but not remove them
-V, --verbose: verbose output messages
"""
import os
import sys
import subprocess

import psutil

from oslocfg import cfg
from seafutil import config
from seafutil.seafile import SeafileCommand
from seafutil.ccnet import CcnetCommand

CONF = cfg.CONF

SEAFGC = '/usr/bin/seafserv-gc'

CONF.register_cli_opts(config.gc_opts)
CONF(project='seafutil-gc')


EXECLIST = frozenset([
    '/usr/bin/ccnet-server',
    '/usr/bin/seaf-server',
])

def check(*pidfiles):
    for pidfile in pidfiles:
        with open(pidfile, 'r') as f:
            pid = int(f.read().strip())
            try:
                p = psutil.Process(pid)
                exe = p.exe()
            except psutil.NoSuchProcess:
                continue
            if exe in EXECLIST:
                return False
    return True

def main():
    cfile = CONF.config

    if not check(CONF.ccent, CONF.seafile):
        print('Ccent or Seafile is runing')
        sys.exit(1)

    args = [SEAFGC, ]
    extargs = []
    if CONF.remove:
        extargs.append('-r')    # --rm-deleted
    else:
        extargs.append('-D')    # --dry-run
    if CONF.verbose:
        extargs.append('-v')
    if CONF.repos:
        extargs.append(' '.join(CONF.repos))

    CONF.reset()
    CONF.register_cli_opts(config.location_opts)
    CONF(project='seafile-gc', default_config_files=[cfile, ])

    args.extend(['-c', os.path.join(CONF.datadir, CcnetCommand.DATADIR)])
    args.extend(['-d', os.path.join(CONF.datadir, SeafileCommand.DATADIR)])
    args.extend(['-F', CONF.cfgdir])

    sub = subprocess.Popen(args + extargs, executable=args[0], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    sub.wait()


if __name__ == '__main__':
    main()
